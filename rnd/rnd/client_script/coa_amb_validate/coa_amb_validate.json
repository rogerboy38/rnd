{
 "creation": "2025-08-22 20:11:59.649421",
 "docstatus": 0,
 "doctype": "Client Script",
 "dt": "COA AMB2",
 "enabled": 0,
 "idx": 0,
 "modified": "2025-08-22 23:16:31.330404",
 "modified_by": "Administrator",
 "module": "RND",
 "name": "coa_amb_validate",
 "owner": "Administrator",
 "script": "frappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Add custom button to validate all results\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('Validate All Results'), function() {\r\n                validate_all_results(frm);\r\n            }).addClass('btn-primary');\r\n        }\r\n        \r\n        // Apply CSS styles\r\n        apply_validation_styles();\r\n        \r\n        // Set up validation for existing rows\r\n        setup_existing_rows_validation(frm);\r\n    },\r\n    \r\n    // Set up validation when form loads\r\n    onload: function(frm) {\r\n        setup_parameter_validation(frm);\r\n    },\r\n    \r\n    // Also set up when coa_quality_test_parameter field refreshes\r\n    coa_quality_test_parameter: function(frm) {\r\n        setup_existing_rows_validation(frm);\r\n    }\r\n});\r\n\r\n// Set up validation for parameter rows\r\nfunction setup_parameter_validation(frm) {\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            const row = frappe.get_doc(cdt, cdn);\r\n            setTimeout(function() {\r\n                validate_parameter_row(row);\r\n                frm.refresh_field('coa_quality_test_parameter');\r\n            }, 300);\r\n        },\r\n        \r\n        refresh_field: function(frm, cdt, cdn) {\r\n            // Apply visual styling when field refreshes\r\n            apply_row_styling(frm, cdt, cdn);\r\n        }\r\n    });\r\n}\r\n\r\n// Apply styling to existing rows\r\nfunction setup_existing_rows_validation(frm) {\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n            apply_row_styling_by_doc(frm, row);\r\n        });\r\n    }\r\n}\r\n\r\n// Apply CSS styles to document\r\nfunction apply_validation_styles() {\r\n    // Check if styles are already added\r\n    if (document.getElementById('coa-validation-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'coa-validation-styles';\r\n    style.textContent = `\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-pass { \r\n            background-color: #e6f7e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-fail { \r\n            background-color: #ffe6e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-na { \r\n            background-color: #f5f5f5 !important; \r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n// Apply styling to a specific row\r\nfunction apply_row_styling(frm, cdt, cdn) {\r\n    const row = frappe.get_doc(cdt, cdn);\r\n    apply_row_styling_by_doc(frm, row);\r\n}\r\n\r\nfunction apply_row_styling_by_doc(frm, row) {\r\n    const grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid && grid.grid_rows_by_docname && grid.grid_rows_by_docname[row.name]) {\r\n        const grid_row = grid.grid_rows_by_docname[row.name];\r\n        \r\n        // Remove existing classes\r\n        grid_row.$row.removeClass('result-pass result-fail result-na');\r\n        \r\n        // Add appropriate class based on status\r\n        if (row.result_status === 'PASS') {\r\n            grid_row.$row.addClass('result-pass');\r\n        } else if (row.result_status === 'FAIL') {\r\n            grid_row.$row.addClass('result-fail');\r\n        } else if (row.result_status === 'N/A') {\r\n            grid_row.$row.addClass('result-na');\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate a single row\r\nfunction validate_parameter_row(row) {\r\n    if (!row.result_value) {\r\n        return null;\r\n    }\r\n\r\n    if (row.is_numeric == 1) {\r\n        // Numeric validation\r\n        const result = parseFloat(row.result_value);\r\n        \r\n        if (isNaN(result)) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n\r\n        const min = parseFloat(row.min_value) || -Infinity;\r\n        const max = parseFloat(row.max_value) || Infinity;\r\n\r\n        if (result >= min && result <= max) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n    } else {\r\n        // Non-numeric validation\r\n        const result = (row.result_value || '').toString().toUpperCase().trim();\r\n        \r\n        if (result === 'PASS' || result === 'YES' || result === 'TRUE' || result === 'OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else if (result === 'FAIL' || result === 'NO' || result === 'FALSE' || result === 'NOT OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'N/A');\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate all results in the table\r\nfunction validate_all_results(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No test parameters found'));\r\n        return;\r\n    }\r\n\r\n    let allValid = true;\r\n    let passedCount = 0;\r\n    let failedCount = 0;\r\n    let naCount = 0;\r\n    let emptyCount = 0;\r\n\r\n    frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n        if (row.result_value) {\r\n            const isValid = validate_parameter_row(row);\r\n            if (isValid === true) passedCount++;\r\n            if (isValid === false) {\r\n                failedCount++;\r\n                allValid = false;\r\n            }\r\n            if (isValid === null) naCount++;\r\n        } else {\r\n            emptyCount++;\r\n        }\r\n    });\r\n\r\n    // Refresh the table to show updated status\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n\r\n    // Show summary\r\n    let message = __(`Validation complete: ${passedCount} PASS, ${failedCount} FAIL`);\r\n    if (naCount > 0) message += __(`, ${naCount} N/A`);\r\n    if (emptyCount > 0) message += __(`, ${emptyCount} Empty`);\r\n\r\n    frappe.msgprint({\r\n        title: __('Validation Results'),\r\n        indicator: allValid ? 'green' : 'red',\r\n        message: message\r\n    });\r\n\r\n    return allValid;\r\n}",
 "view": "Form"
}
