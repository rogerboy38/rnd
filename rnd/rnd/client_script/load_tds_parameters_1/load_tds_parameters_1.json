{
 "creation": "2025-08-30 20:37:19.343565",
 "docstatus": 0,
 "doctype": "Client Script",
 "dt": "COA AMB",
 "enabled": 1,
 "idx": 0,
 "modified": "2025-08-30 21:30:44.992821",
 "modified_by": "fcrm@amb-wellness.com",
 "module": "RND",
 "name": "load_tds_parameters_1",
 "owner": "fcrm@amb-wellness.com",
 "script": "// COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation\r\n// Complete working version with proper field copying and validation fixes\r\n\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Clear any existing buttons first\r\n        frm.page.clear_icons();\r\n        frm.page.clear_actions();\r\n        \r\n        // Store current form reference for real-time validation\r\n        window.cur_frm = frm;\r\n        \r\n        // Add main action buttons\r\n        frm.add_custom_button(__('\ud83d\udce5 Load TDS Parameters'), function() {\r\n            load_tds_parameters_enhanced(frm);\r\n        }, __('Actions'));\r\n        \r\n        frm.add_custom_button(__('\u2705 Validate TDS Compliance'), function() {\r\n            validate_tds_compliance_fixed(frm);\r\n        }, __('Actions'));\r\n        \r\n        // Add Submit button if validation passes and document is not submitted\r\n        if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n            frm.add_custom_button(__('\ud83d\ude80 Submit COA'), function() {\r\n                submit_coa_document(frm);\r\n            }, __('Actions')).addClass('btn-primary');\r\n            \r\n            // Show compliance alert\r\n            frappe.show_alert({\r\n                message: __('\u2705 Document is compliant and ready for submission'),\r\n                indicator: 'green'\r\n            });\r\n        }\r\n        \r\n        // Add utility buttons\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('\ud83d\udd0d Debug Values'), function() {\r\n                debug_current_values_detailed(frm);\r\n            }, __('Tools'));\r\n            \r\n            frm.add_custom_button(__('\ud83d\uddd1\ufe0f Clear Parameters'), function() {\r\n                clear_parameters_with_confirmation(frm);\r\n            }, __('Tools'));\r\n        }\r\n        \r\n        // Apply enhanced styling\r\n        apply_enhanced_styles();\r\n        \r\n        // Setup real-time validation\r\n        setup_real_time_validation(frm);\r\n        \r\n        console.log('Form refreshed. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        console.log('After save event triggered. Validation status:', frm.doc.validation_status);\r\n        \r\n        // Check validation status after save and update UI accordingly\r\n        if (frm.doc.validation_status === 'Compliant') {\r\n            // Use setTimeout to ensure the form is fully saved before refreshing buttons\r\n            setTimeout(function() {\r\n                console.log('Refreshing buttons after save...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n        }\r\n    },\r\n    \r\n    linked_tds: function(frm) {\r\n        if (frm.doc.linked_tds) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'TDS Product Specification',\r\n                    name: frm.doc.linked_tds\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        var param_count = r.message.item_quality_inspection_parameter ? r.message.item_quality_inspection_parameter.length : 0;\r\n                        frappe.show_alert({\r\n                            message: __('TDS Selected: {0} parameters available', [param_count]),\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// =====================\r\n// FORM BUTTON MANAGEMENT\r\n// =====================\r\n\r\nfunction setup_form_buttons(frm) {\r\n    console.log('Setting up form buttons. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    \r\n    // Clear existing buttons\r\n    frm.page.clear_actions();\r\n    \r\n    // Always add these buttons first\r\n    frm.add_custom_button(__('\ud83d\udce5 Load TDS Parameters'), function() {\r\n        load_tds_parameters_enhanced(frm);\r\n    }, __('Actions'));\r\n    \r\n    frm.add_custom_button(__('\u2705 Validate TDS Compliance'), function() {\r\n        validate_tds_compliance_fixed(frm);\r\n    }, __('Actions'));\r\n    \r\n    // Add Submit button if document is compliant and not submitted\r\n    if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n        console.log('Adding Submit button - conditions met');\r\n        \r\n        frm.add_custom_button(__('\ud83d\ude80 Submit COA'), function() {\r\n            submit_coa_document(frm);\r\n        }, __('Actions')).addClass('btn-primary');\r\n        \r\n        // Show a message indicating the document is ready for submission\r\n        frappe.show_alert({\r\n            message: __('\u2705 Document is compliant and ready for submission'),\r\n            indicator: 'green'\r\n        });\r\n    } else {\r\n        console.log('Submit button not added. Docstatus:', frm.doc.docstatus, 'Validation status:', frm.doc.validation_status);\r\n    }\r\n    \r\n    // Add utility buttons\r\n    if(!frm.is_new()) {\r\n        frm.add_custom_button(__('\ud83d\udd0d Debug Values'), function() {\r\n            debug_current_values_detailed(frm);\r\n        }, __('Tools'));\r\n        \r\n        frm.add_custom_button(__('\ud83d\uddd1\ufe0f Clear Parameters'), function() {\r\n            clear_parameters_with_confirmation(frm);\r\n        }, __('Tools'));\r\n    }\r\n    \r\n    // Force refresh of button area\r\n    frm.page.refresh();\r\n}\r\n\r\n// =====================\r\n// REAL-TIME VALIDATION SETUP\r\n// =====================\r\n\r\nfunction setup_real_time_validation(frm) {\r\n    // Initialize validation styles\r\n    initialize_validation_styles();\r\n    \r\n    // Set up event handler for result_value changes\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            console.log('Field changed for row ' + cdn + ': result_value = \"' + locals[cdt][cdn].result_value + '\"');\r\n            \r\n            // Use setTimeout to allow the field change to be processed normally\r\n            setTimeout(function() {\r\n                perform_real_time_validation_for_row(frm, cdt, cdn);\r\n            }, 200);\r\n        }\r\n    });\r\n    \r\n    console.log('Real-time validation setup complete');\r\n}\r\n\r\nfunction perform_real_time_validation_for_row(frm, cdt, cdn) {\r\n    console.log('Performing real-time validation for row ' + cdn);\r\n    \r\n    var row = locals[cdt][cdn];\r\n    if (!row) {\r\n        console.log('Row not found');\r\n        return;\r\n    }\r\n    \r\n    console.log('  Current result value: \"' + row.result_value + '\"');\r\n    \r\n    // Skip validation if result_value is empty\r\n    if (!row.result_value || row.result_value.toString().trim() === '') {\r\n        // Clear any existing validation styling\r\n        clear_validation_styling_fixed(cdn);\r\n        // Clear result text\r\n        frappe.model.set_value(cdt, cdn, 'result_text', '');\r\n        return;\r\n    }\r\n    \r\n    // Handle negative values in real-time validation\r\n    var validation_result = validate_single_parameter(row);\r\n    \r\n    // Apply styling based on validation result\r\n    apply_validation_styling_fixed(cdn, validation_result);\r\n    \r\n    // Update result_text field with PASS/FAIL status\r\n    update_result_text_field(frm, cdt, cdn, validation_result.status);\r\n    \r\n    console.log('  Validation result: ' + validation_result.status);\r\n}\r\n\r\nfunction update_result_text_field(frm, cdt, cdn, status) {\r\n    // Update the result_text field with the validation status\r\n    frappe.model.set_value(cdt, cdn, 'result_text', status);\r\n    \r\n    // Also update the result_status field if it exists\r\n    if (locals[cdt][cdn].result_status !== undefined) {\r\n        var status_display = '';\r\n        switch(status) {\r\n            case 'PASS': status_display = 'Compliant'; break;\r\n            case 'FAIL': status_display = 'Non-Compliant'; break;\r\n            case 'PENDING': status_display = 'Pending'; break;\r\n            default: status_display = status;\r\n        }\r\n        frappe.model.set_value(cdt, cdn, 'result_status', status_display);\r\n    }\r\n}\r\n\r\nfunction clear_validation_styling_fixed(cdn) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length > 0) {\r\n            // Remove validation classes from the result_value field input\r\n            row_element.find('[data-fieldname=\"result_value\"] input').removeClass('validation-pass validation-fail');\r\n            \r\n            // Remove any validation indicator elements we might have added\r\n            row_element.find('.validation-indicator').remove();\r\n        }\r\n    } catch (error) {\r\n        console.log('Error clearing validation styling:', error);\r\n    }\r\n}\r\n\r\nfunction apply_validation_styling_fixed(cdn, validation_result) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length === 0) {\r\n            console.log('Row element not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Find the result_value input field specifically\r\n        var result_input = row_element.find('[data-fieldname=\"result_value\"] input');\r\n        if (result_input.length === 0) {\r\n            console.log('Result input field not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Clear existing validation classes first\r\n        result_input.removeClass('validation-pass validation-fail');\r\n        \r\n        // Apply appropriate class based on validation result\r\n        if (validation_result.status === 'PASS') {\r\n            result_input.addClass('validation-pass');\r\n        } else if (validation_result.status === 'FAIL') {\r\n            result_input.addClass('validation-fail');\r\n        }\r\n        \r\n        console.log('Applied validation styling for row ' + cdn + ': ' + validation_result.status);\r\n        \r\n    } catch (error) {\r\n        console.log('Error applying validation styling:', error);\r\n    }\r\n}\r\n\r\n// Also update the single parameter validation function\r\nfunction validate_single_parameter(param) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        message: '',\r\n        parameter_name: param.parameter || 'Unknown'\r\n    };\r\n    \r\n    // Skip validation for title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIP';\r\n        result.message = 'Title row - validation skipped';\r\n        return result;\r\n    }\r\n    \r\n    // Skip if result_value is empty\r\n    if (!param.result_value || param.result_value.toString().trim() === '') {\r\n        result.status = 'PENDING';\r\n        result.message = 'No result value entered';\r\n        return result;\r\n    }\r\n    \r\n    try {\r\n        var resultValue = parseFloat(param.result_value);\r\n        var minValue = param.min_value !== null && param.min_value !== undefined && param.min_value !== '' ? parseFloat(param.min_value) : null;\r\n        var maxValue = param.max_value !== null && param.max_value !== undefined && param.max_value !== '' ? parseFloat(param.max_value) : null;\r\n        \r\n        // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n        var acceptanceCriteria = param.value || '';\r\n        \r\n        // SPECIAL CASE: Handle \"NEGATIVE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n            var resultStr = param.result_value.toString().toUpperCase().trim();\r\n            if (resultStr === 'NEGATIVE' || resultStr === 'NEG' || resultStr === '0') {\r\n                result.status = 'PASS';\r\n                result.message = 'Negative result as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Expected negative result but got \"' + param.result_value + '\"';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"NOT DETECTABLE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n            var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n            var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n            \r\n            if (!isNaN(resultValue) && resultValue < lodValue) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value below detection limit of ' + lodValue;\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value \"' + param.result_value + '\" should be below LOD of ' + lodValue;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check if result value is a valid number\r\n        if (isNaN(resultValue)) {\r\n            // For non-numeric values, check against acceptance criteria\r\n            if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n                // Compare result with acceptance criteria (case-insensitive)\r\n                var resultStr = param.result_value.toString().toLowerCase().trim();\r\n                var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n                \r\n                if (resultStr === criteriaStr) {\r\n                    result.status = 'PASS';\r\n                    result.message = 'Value matches acceptance criteria';\r\n                } else {\r\n                    result.status = 'FAIL';\r\n                    result.message = 'Value doesn\\'t match acceptance criteria';\r\n                }\r\n            } else {\r\n                // No acceptance criteria to compare against - auto-pass if value exists\r\n                result.status = 'PASS';\r\n                result.message = 'No acceptance criteria, value exists';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Handle special case where both min and max are 0\r\n        if (minValue === 0 && maxValue === 0) {\r\n            if (resultValue === 0) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value is exactly 0 as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value ' + resultValue + ' is not 0 (required range: 0 - 0)';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Perform range validation for numeric values\r\n        var withinMin = (minValue === null || isNaN(minValue) || resultValue >= minValue);\r\n        var withinMax = (maxValue === null || isNaN(maxValue) || resultValue <= maxValue);\r\n        \r\n        if (withinMin && withinMax) {\r\n            result.status = 'PASS';\r\n            result.message = 'Value ' + resultValue + ' is within acceptable range';\r\n        } else {\r\n            result.status = 'FAIL';\r\n            var rangeInfo = '';\r\n            if (minValue !== null && !isNaN(minValue)) rangeInfo += 'Min: ' + minValue;\r\n            if (maxValue !== null && !isNaN(maxValue)) {\r\n                if (rangeInfo) rangeInfo += ', ';\r\n                rangeInfo += 'Max: ' + maxValue;\r\n            }\r\n            result.message = 'Value ' + resultValue + ' is outside acceptable range (' + rangeInfo + ')';\r\n        }\r\n        \r\n    } catch (error) {\r\n        result.status = 'ERROR';\r\n        result.message = 'Validation error: ' + error.message;\r\n        console.error('Validation error for parameter ' + param.parameter + ':', error);\r\n    }\r\n    \r\n    return result;\r\n}\r\nfunction initialize_validation_styles() {\r\n    // Use jQuery document ready instead of frappe.ready\r\n    $(document).ready(function() {\r\n        // Remove any existing validation styles first\r\n        $('#validation-styles').remove();\r\n        \r\n        // Add improved validation styles\r\n        $('<style id=\"validation-styles\">')\r\n            .prop('type', 'text/css')\r\n            .html(\r\n                '/* COA AMB Validation Styles */\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-pass {\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '    border-color: #28a745 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-fail {\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '    border-color: #dc3545 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input[readonly] {\\n' +\r\n                '    background-color: #f8f9fa !important;\\n' +\r\n                '    font-weight: bold;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pass-text {\\n' +\r\n                '    color: #28a745 !important;\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-fail-text {\\n' +\r\n                '    color: #dc3545 !important;\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pending-text {\\n' +\r\n                '    color: #ffc107 !important;\\n' +\r\n                '    background-color: #fff3cd !important;\\n' +\r\n                '}\\n' +\r\n                '/* Ensure no accumulation of visual elements */\\n' +\r\n                '.validation-indicator {\\n' +\r\n                '    display: inline-block;\\n' +\r\n                '    margin-left: 5px;\\n' +\r\n                '}'\r\n            )\r\n            .appendTo('head');\r\n        \r\n        console.log('COA AMB validation styles initialized');\r\n    });\r\n}\r\n\r\n// =====================\r\n// VALIDATION FUNCTIONS\r\n// =====================\r\n\r\nfunction validate_tds_compliance_fixed(frm) {\r\n    console.log('=== STARTING TDS COMPLIANCE VALIDATION ===');\r\n    \r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to validate'));\r\n        return;\r\n    }\r\n    \r\n    // CRITICAL: Force refresh all form data before validation\r\n    frm.refresh_fields();\r\n    \r\n    // Get fresh data from the grid\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    var current_data = [];\r\n    \r\n    if (grid && grid.grid_rows) {\r\n        grid.grid_rows.forEach(function(grid_row, index) {\r\n            if (grid_row.doc) {\r\n                current_data.push(grid_row.doc);\r\n            }\r\n        });\r\n    } else {\r\n        current_data = frm.doc.coa_quality_test_parameter;\r\n    }\r\n    \r\n    console.log('Total parameters to validate:', current_data.length);\r\n    \r\n    var validation_results = {\r\n        total: current_data.length,\r\n        passed: 0,\r\n        failed: 0,\r\n        pending: 0,\r\n        skipped: 0,\r\n        title_rows: 0,\r\n        issues: []\r\n    };\r\n    \r\n    current_data.forEach(function(param, index) {\r\n        console.log('\\n--- Validating Row ' + (index + 1) + ': ' + param.parameter + ' ---');\r\n        console.log('Raw data:', {\r\n            parameter: param.parameter,\r\n            result_value: param.result_value,\r\n            min_value: param.min_value,\r\n            max_value: param.max_value,\r\n            numeric: param.numeric,\r\n            specification: param.specification\r\n        });\r\n        \r\n        // Skip title rows\r\n        if (is_title_row(param)) {\r\n            console.log('Skipping title row');\r\n            validation_results.skipped++;\r\n            validation_results.title_rows++;\r\n            \r\n            // Set result text to empty for title rows\r\n            param.result_text = '';\r\n            param.result_status = 'N/A';\r\n            \r\n            return;\r\n        }\r\n        \r\n        var result = validate_parameter_compliance_fixed(param, index);\r\n        console.log('Validation result:', result);\r\n        \r\n        if (result.status === 'PASS') validation_results.passed++;\r\n        else if (result.status === 'FAIL') validation_results.failed++;\r\n        else validation_results.pending++;\r\n        \r\n        if (result.issues.length > 0) {\r\n            validation_results.issues = validation_results.issues.concat(result.issues);\r\n        }\r\n        \r\n        // Update the parameter result\r\n        param.result_text = result.status;\r\n        update_parameter_result(frm, param, result.status);\r\n    });\r\n    \r\n    console.log('=== VALIDATION COMPLETE ===');\r\n    console.log('Results:', validation_results);\r\n    \r\n    // Update the document validation status\r\n    update_document_validation_status(frm, validation_results);\r\n    \r\n    // Refresh the form after updating results\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n    \r\n    show_compliance_results(validation_results, frm);\r\n}\r\n\r\nfunction validate_parameter_compliance_fixed(param, index) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        issues: []\r\n    };\r\n    \r\n    // Skip title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIPPED';\r\n        return result;\r\n    }\r\n    \r\n    // Check if result value is provided\r\n    var resultValue = param.result_value;\r\n    console.log('  Result value: \"' + resultValue + '\" (type: ' + (typeof resultValue) + ')');\r\n    \r\n    if (resultValue === null || resultValue === undefined || resultValue === '') {\r\n        result.status = 'PENDING';\r\n        result.issues.push('Row ' + (index + 1) + ': No result value entered');\r\n        console.log('  Status: PENDING (no result value)');\r\n        return result;\r\n    }\r\n    \r\n    // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n    var acceptanceCriteria = param.value || '';\r\n    console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n    \r\n    // SPECIAL CASE: Handle \"NEGATIVE\" specifications (like for Coliforms, Pathogens)\r\n    if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NEGATIVE' || resultStr === 'NEG'  || resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n        if (acceptanceCriteria.toUpperCase().includes('NONE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n    // SPECIAL CASE: Handle \"NOT DETECTABLE\" specifications\r\n    if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n        var resultNum = parseFloat(resultValue);\r\n        var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n        var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n        \r\n        if (!isNaN(resultNum) && resultNum < lodValue) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (below detection limit)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Value \"' + resultValue + '\" should be below LOD of ' + lodValue);\r\n            console.log('  Status: FAIL (above detection limit)');\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // Determine if this should be treated as numeric\r\n    var minVal = param.min_value;\r\n    var maxVal = param.max_value;\r\n    var hasNumericConstraints = (minVal !== null && minVal !== undefined && minVal !== '') || \r\n                                  (maxVal !== null && maxVal !== undefined && maxVal !== '');\r\n    \r\n    console.log('  Min: ' + minVal + ', Max: : ' + maxVal + ', Has numeric constraints: ' + hasNumericConstraints);\r\n    \r\n    if (hasNumericConstraints) {\r\n        // NUMERIC VALIDATION (including negative values)\r\n        var resultNum = parseFloat(resultValue);\r\n        var minNum = minVal !== null && minVal !== undefined && minVal !== '' ? parseFloat(minVal) : null;\r\n        var maxNum = maxVal !== null && maxVal !== undefined && maxVal !== '' ? parseFloat(maxVal) : null;\r\n        \r\n        console.log('  Parsed values - Result: ' + resultNum + ', Min: ' + minNum + ', Max: ' + maxNum);\r\n        \r\n        // Check if result is a valid number (including negative values)\r\n        if (isNaN(resultNum)) {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Invalid numeric result value \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (invalid number)');\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"must be exactly 0\" (both min and max are 0)\r\n        if (minNum === 0 && maxNum === 0) {\r\n            if (resultNum === 0) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (exactly 0 as required)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Value ' + resultNum + ' is not 0 (required range: 0 - 0)');\r\n                console.log('  Status: FAIL (not 0 when range is 0-0)');\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check range constraints (handles negative values correctly)\r\n        var withinRange = true;\r\n        var constraintMessages = [];\r\n        \r\n        // Check minimum value (handles negative values)\r\n        if (minVal !== null && minVal !== undefined && minVal !== '' && !isNaN(minNum)) {\r\n            if (resultNum < minNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' below minimum ' + minNum);\r\n            }\r\n        }\r\n        \r\n        // Check maximum value (handles negative values)\r\n        if (maxVal !== null && maxVal !== undefined && maxVal !== '' && !isNaN(maxNum)) {\r\n            if (resultNum > maxNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' above maximum ' + maxNum);\r\n            }\r\n        }\r\n        \r\n        if (withinRange) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (within range)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': ' + constraintMessages.join(', '));\r\n            console.log('  Status: FAIL (' + constraintMessages.join(', ') + ')');\r\n        }\r\n        \r\n    } else {\r\n        // NON-NUMERIC VALIDATION - Check against acceptance criteria\r\n        console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n        \r\n        if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n            // Compare result with acceptance criteria (case-insensitive)\r\n            var resultStr = resultValue.toString().toLowerCase().trim();\r\n            var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n            \r\n            console.log('  Comparing: \"' + resultStr + '\" vs \"' + criteriaStr + '\"');\r\n            \r\n            if (resultStr === criteriaStr) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (matches acceptance criteria)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Result \"' + resultValue + '\" doesn\\'t match acceptance criteria \"' + acceptanceCriteria + '\"');\r\n                console.log('  Status: FAIL (doesn\\'t match acceptance criteria)');\r\n            }\r\n        } else {\r\n            // No acceptance criteria to compare against - auto-pass if value exists\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (no acceptance criteria, value exists)');\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\n// Enhanced function to check if a row is a title/header\r\nfunction is_title_row(param) {\r\n    if (!param) return false;\r\n    \r\n    // Check explicit title row flag from TDS\r\n    if (param.is_title_row === 1) {\r\n        return true;\r\n    }\r\n    \r\n    // Check if parameter name suggests it's a title\r\n    if (param.parameter) {\r\n        var paramLower = param.parameter.toLowerCase();\r\n        if (paramLower.includes('title') || \r\n            paramLower.includes('header') || \r\n            paramLower.includes('section') ||\r\n            paramLower === 'organoleptic' ||\r\n            paramLower === 'physicochemical' ||\r\n            paramLower === 'microbiological' ||\r\n            paramLower === 'other analysis' ||\r\n            paramLower.includes('---') ||\r\n            paramLower.includes('***') ||\r\n            paramLower.includes('===')) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // Check if it has no validation criteria (no min/max/specification)\r\n    var hasMinMax = (param.min_value !== null && param.min_value !== undefined && param.min_value !== '') ||\r\n                      (param.max_value !== null && param.max_value !== undefined && param.max_value !== '');\r\n    var hasSpec = param.specification && param.specification.trim() !== '';\r\n    \r\n    if (!hasMinMax && !hasSpec) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction update_document_validation_status(frm, validation_results) {\r\n    var validation_status = 'Non-Compliant';\r\n    var overall_status = 'FAIL';\r\n    \r\n    if (validation_results.failed === 0 && validation_results.passed > 0) {\r\n        validation_status = 'Compliant';\r\n        overall_status = 'PASS';\r\n    } else if (validation_results.pending > 0 && validation_results.failed === 0) {\r\n        validation_status = 'Pending Review';\r\n        overall_status = 'PENDING';\r\n    } else if (validation_results.passed === 0 && validation_results.failed === 0 && validation_results.pending === 0) {\r\n        validation_status = 'Not Started';\r\n        overall_status = 'PENDING';\r\n    }\r\n    \r\n    console.log('Setting validation status to:', validation_status);\r\n    \r\n    // Update the document fields - check if fields exist first\r\n    if (frm.fields_dict.validation_status) {\r\n        frm.set_value('validation_status', validation_status);\r\n    } else {\r\n        console.warn('validation_status field not found in doctype');\r\n    }\r\n    \r\n    if (frm.fields_dict.overall_compliance_status) {\r\n        frm.set_value('overall_compliance_status', overall_status);\r\n    } else {\r\n        console.warn('overall_compliance_status field not found in doctype');\r\n    }\r\n    \r\n    // Save the document to persist the validation status\r\n    frm.save().then(function() {\r\n        console.log('Document validation status updated and saved to:', validation_status);\r\n        \r\n        // If validation passed, refresh the form to show the Submit button\r\n        if (validation_status === 'Compliant') {\r\n            console.log('Validation compliant - setting up submit button');\r\n            \r\n            // Multiple approaches to ensure button appears\r\n            setTimeout(function() {\r\n                console.log('Refreshing form for submit button...');\r\n                frm.refresh();\r\n            }, 500);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Setting up form buttons...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Final button setup...');\r\n                setup_form_buttons(frm);\r\n            }, 1500);\r\n        }\r\n    }).catch(function(error) {\r\n        console.error('Error saving document:', error);\r\n        // Handle case where fields don't exist\r\n        if (error.message && error.message.includes('validation_status')) {\r\n            frappe.msgprint({\r\n                title: __('Field Missing'),\r\n                message: __('The validation_status field is missing from the COA AMB doctype. Please add it to enable full functionality.'),\r\n                indicator: 'red'\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_compliance_results(results, frm) {\r\n    var message = '<div style=\"margin: 10px 0;\">' +\r\n        '<h4>\ud83d\udcca TDS Compliance Results</h4>' +\r\n        '<p><strong>Total Rows:</strong> ' + results.total + '</p>' +\r\n        '<p><strong>\u2705 PASS:</strong> <span style=\"color: green;\">' + results.passed + '</span></p>' +\r\n        '<p><strong>\u274c FAIL:</strong> <span style=\"color: red;\">' + results.failed + '</span></p>' +\r\n        '<p><strong>\u23f3 PENDING:</strong> <span style=\"color: orange;\">' + results.pending + '</span></p>' +\r\n        '<p><strong>\ud83d\udccb TITLE ROWS:</strong> <span style=\"color: blue;\">' + results.title_rows + '</span></p>' +\r\n        '<p><strong>\ud83d\udeab SKIPPED:</strong> <span style=\"color: gray;\">' + results.skipped + '</span></p>' +\r\n        '</div>';\r\n    \r\n    if (results.issues.length > 0) {\r\n        message += '<div style=\"margin: 10px 0;\"><h5>\ud83d\udd0d Validation Issues:</h5><ul style=\"max-height: 200px; overflow-y: auto;\">';\r\n        results.issues.forEach(function(issue) {\r\n            message += '<li>' + issue + '</li>';\r\n        });\r\n        message += '</ul></div>';\r\n    } else {\r\n        // Show success message when there are no issues\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d4edda; border-radius: 5px; border: 1px solid #c3e6cb;\">' +\r\n                   '<h5 style=\"color: #155724; margin: 0;\">\u2705 All parameters passed validation successfully!</h5>' +\r\n                   '</div>';\r\n    }\r\n    \r\n    // Calculate overall status\r\n    var validatedCount = results.passed + results.failed + results.pending;\r\n    var overallStatus = 'PASS';\r\n    var indicator = 'green';\r\n    \r\n    if (results.failed > 0) {\r\n        overallStatus = 'FAIL';\r\n        indicator = 'red';\r\n    } else if (results.pending > 0 && validatedCount > 0) {\r\n        overallStatus = 'PENDING';\r\n        indicator = 'orange';\r\n    }\r\n    \r\n    message += '<div style=\"background-color: ' + getStatusColor(indicator) + '; ' +\r\n                'padding: 10px; border-radius: 5px; margin: 10px 0;\">' +\r\n                '<h4>Overall Status: <span style=\"color: ' + indicator + ';\">' + overallStatus + '</span></h4>' +\r\n                '</div>';\r\n    \r\n    // Add submit instructions if all validations pass\r\n    if (results.failed === 0 && results.passed > 0) {\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d1ecf1; border-radius: 5px; border: 1px solid #bee5eb;\">' +\r\n                   '<h5 style=\"color: #0c5460; margin: 0;\">\ud83d\udcdd Next Steps:</h5>' +\r\n                   '<p style=\"margin: 5px 0 0 0; color: #0c5460;\">All parameters are compliant. The \"Submit COA\" button is now available for submission.</p>' +\r\n                   '</div>';\r\n        \r\n        // Force multiple refreshes to ensure button appears\r\n        setTimeout(function() {\r\n            console.log('First refresh after compliance results...');\r\n            frm.refresh();\r\n        }, 500);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Second refresh and button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1000);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Final button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1500);\r\n    }\r\n    \r\n    frappe.msgprint({\r\n        title: __('TDS Compliance Validation'),\r\n        message: message,\r\n        indicator: indicator\r\n    });\r\n}\r\n\r\nfunction submit_coa_document(frm) {\r\n    frappe.confirm(\r\n        __('Are you sure you want to submit this COA? This will start the approval workflow.'),\r\n        function() {\r\n            // Show loading indicator\r\n            frappe.show_alert({ message: __('Submitting COA and starting workflow...'), indicator: 'blue' });\r\n            \r\n            // Call server method to submit and start workflow\r\n            frappe.call({\r\n                method: 'erpnext.quality_management.doctype.coa_amb.coa_amb.submit_and_start_workflow',\r\n                args: {\r\n                    docname: frm.doc.name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.success) {\r\n                        frappe.show_alert({\r\n                            message: __('COA submitted successfully! Workflow has been started.'),\r\n                            indicator: 'green'\r\n                        });\r\n                        \r\n                        // Reload the form to show the new status\r\n                        frm.reload_doc();\r\n                    } else {\r\n                        frappe.msgprint({\r\n                            title: __('Submission Failed'),\r\n                            message: __('Error submitting COA: ') + (r.message.error || 'Unknown error'),\r\n                            indicator: 'red'\r\n                        });\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint({\r\n                        title: __('Submission Error'),\r\n                        message: __('Network error: ') + err.message,\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        function() {\r\n            // Cancel action\r\n            console.log('COA submission cancelled');\r\n        }\r\n    );\r\n}\r\n\r\n// =====================\r\n// LOAD TDS PARAMETERS (ENHANCED WITH COMPLETE FIELD MAPPING)\r\n// =====================\r\n\r\nfunction load_tds_parameters_enhanced(frm) {\r\n    console.log('Load TDS Parameters button clicked');\r\n    \r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint({\r\n            title: __('TDS Required'),\r\n            message: __('Please select a TDS Product Specification first'),\r\n            indicator: 'red'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.name) {\r\n        frappe.confirm(\r\n            __('Document must be saved before loading parameters. Save now?'),\r\n            function() {\r\n                frm.save().then(function() {\r\n                    execute_parameter_loading(frm);\r\n                });\r\n            }\r\n        );\r\n        return;\r\n    }\r\n    \r\n    execute_parameter_loading(frm);\r\n}\r\n\r\nfunction execute_parameter_loading(frm) {\r\n    console.log('Executing parameter loading for TDS:', frm.doc.linked_tds);\r\n    \r\n    var loading_dialog = frappe.show_progress(\r\n        __('Loading Parameters'),\r\n        __('Fetching parameters from TDS...'),\r\n        0\r\n    );\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'TDS Product Specification',\r\n            name: frm.doc.linked_tds\r\n        },\r\n        callback: function(r) {\r\n            loading_dialog.hide();\r\n            \r\n            if (r.message) {\r\n                process_tds_parameters(r.message, frm);\r\n                \r\n                frappe.show_alert({\r\n                    message: __('\u2705 Successfully loaded parameters from TDS'),\r\n                    indicator: 'green'\r\n                });\r\n                \r\n            } else {\r\n                frappe.msgprint({\r\n                    title: __('Loading Failed'),\r\n                    message: __('Could not load TDS parameters'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction process_tds_parameters(tds_doc, frm) {\r\n    if (!tds_doc.item_quality_inspection_parameter || tds_doc.item_quality_inspection_parameter.length === 0) {\r\n        frappe.msgprint({\r\n            title: __('No Parameters'),\r\n            message: __('No parameters found in the selected TDS'),\r\n            indicator: 'orange'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    // Clear existing parameters\r\n    frm.clear_table('coa_quality_test_parameter');\r\n    \r\n    // Add parameters from TDS\r\n    tds_doc.item_quality_inspection_parameter.forEach(function(tds_param) {\r\n        var row = frm.add_child('coa_quality_test_parameter');\r\n        \r\n        // Map ALL TDS fields to COA fields - FIXED zero handling\r\n        row.parameter = tds_param.parameter || 'Parameter';\r\n        row.specification = tds_param.specification || '';\r\n        row.parameter_group = tds_param.parameter_group || '';\r\n        row.value = tds_param.value || '';\r\n        row.custom_uom = tds_param.custom_uom || '';\r\n        row.numeric = tds_param.numeric || 0;\r\n        row.custom_reconstituted_to_05_total_solids_solution = tds_param.custom_reconstituted_to_05_total_solids_solution || 0;\r\n        row.is_title_row = tds_param.custom_is_title_row || 0;\r\n        \r\n        // FIX: Proper handling of zero values for min/max\r\n        row.min_value = (tds_param.min_value !== null && tds_param.min_value !== undefined) ? tds_param.min_value : null;\r\n        row.max_value = (tds_param.max_value !== null && tds_param.max_value !== undefined) ? tds_param.max_value : null;\r\n        \r\n        row.method = tds_param.custom_method || '';\r\n        row.uom = tds_param.uom || '';\r\n        row.formula_based_criteria = tds_param.formula_based_criteria || 0;\r\n        row.acceptance_formula = tds_param.acceptance_formula || '';\r\n        \r\n        // Initialize result fields\r\n        if (is_title_row(row)) {\r\n            row.result_text = '';\r\n            row.result_value = '';\r\n            row.result_status = 'N/A';\r\n            row.numeric = 0;\r\n        } else {\r\n            row.result_text = 'PENDING';\r\n            row.result_value = '';\r\n            row.result_status = 'Pending';\r\n        }\r\n    });\r\n    \r\n    frm.refresh_field('coa_quality_test_parameter');\r\n}\r\n\r\n// =====================\r\n// DEBUG FUNCTIONS\r\n// =====================\r\n\r\nfunction debug_current_values_detailed(frm) {\r\n    console.log('=== DETAILED DEBUG OUTPUT (INCLUDING NEGATIVE VALUES) ===');\r\n    \r\n    // Check form document data\r\n    console.log('Form document data:');\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(param, index) {\r\n            console.log('Row ' + (index + 1) + ' (form doc):', {\r\n                parameter: param.parameter,\r\n                result_value: param.result_value,\r\n                result_value_type: typeof param.result_value,\r\n                min_value: param.min_value,\r\n                min_value_type: typeof param.min_value,\r\n                max_value: param.max_value,\r\n                max_value_type: typeof param.max_value,\r\n                numeric: param.numeric,\r\n                specification: param.specification,\r\n                result_text: param.result_text,\r\n                // Additional debug for negative values\r\n                has_negative_min: param.min_value < 0,\r\n                has_negative_max: param.max_value < 0,\r\n                has_negative_result: parseFloat(param.result_value) < 0\r\n            });\r\n        });\r\n    }\r\n    \r\n    console.log('Current validation status:', frm.doc.validation_status);\r\n    console.log('Current docstatus:', frm.doc.docstatus);\r\n    console.log('=== DEBUG COMPLETE ===');\r\n    \r\n    frappe.msgprint({\r\n        title: __('Debug Complete'),\r\n        message: __('Check browser console for detailed output including negative value analysis'),\r\n        indicator: 'blue'\r\n    });\r\n}\r\n\r\n// =====================\r\n// UTILITY FUNCTIONS\r\n// =====================\r\n\r\nfunction update_parameter_result(frm, param, status) {\r\n    param.result_text = status;\r\n    \r\n    // Apply styling based on row type\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid) {\r\n        var row = grid.grid_rows_by_docname[param.name];\r\n        if (row) {\r\n            var $row = $(row.row);\r\n            $row.removeClass('parameter-pass parameter-fail parameter-pending parameter-title');\r\n            \r\n            if (is_title_row(param)) {\r\n                $row.addClass('parameter-title');\r\n            } else {\r\n                switch(status) {\r\n                    case 'PASS': $row.addClass('parameter-pass'); break;\r\n                    case 'FAIL': $row.addClass('parameter-fail'); break;\r\n                    case 'PENDING': $row.addClass('parameter-pending'); break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStatusColor(indicator) {\r\n    var colors = {\r\n        'green': '#d4edda',\r\n        'red': '#f8d7da', \r\n        'orange': '#fff3cd',\r\n        'blue': '#cce5ff',\r\n        'gray': '#e2e3e5'\r\n    };\r\n    return colors[indicator] || '#f8f9fa';\r\n}\r\n\r\nfunction clear_parameters_with_confirmation(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to clear'));\r\n        return;\r\n    }\r\n    \r\n    frappe.confirm(\r\n        __('Are you sure you want to clear all {0} parameters?', [frm.doc.coa_quality_test_parameter.length]),\r\n        function() {\r\n            frm.clear_table('coa_quality_test_parameter');\r\n            frm.refresh_field('coa_quality_test_parameter');\r\n            frappe.show_alert({\r\n                message: __('All parameters cleared'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\nfunction apply_enhanced_styles() {\r\n    if (!document.getElementById('coa-amb-enhanced-styles')) {\r\n        var style = document.createElement('style');\r\n        style.id = 'coa-amb-enhanced-styles';\r\n        style.textContent = \r\n            '.parameter-pass {' +\r\n            '    background-color: #d4edda !important;' +\r\n            '    border-left: 4px solid #28a745 !important;' +\r\n            '}' +\r\n            '.parameter-fail {' +\r\n            '    background-color: #f8d7da !important;' +\r\n            '    border-left: 4px solid #dc3545 !important;' +\r\n            '}' +\r\n            '.parameter-pending {' +\r\n            '    background-color: #fff3cd !important;' +\r\n            '    border-left: 4px solid #ffc107 !important;' +\r\n            '}' +\r\n            '.parameter-title {' +\r\n            '    background-color: #e9ecef !important;' +\r\n            '    border-left: 4px solid #6c757d !important;' +\r\n            '    font-style: italic;' +\r\n            '}';\r\n        document.head.appendChild(style);\r\n    }\r\n}\r\n\r\n// Initialize styles\r\napply_enhanced_styles();\r\n\r\nconsole.log('COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation loaded successfully');",
 "view": "Form"
}
