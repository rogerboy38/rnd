{
 "creation": "2025-08-01 19:59:45.726040",
 "docstatus": 0,
 "doctype": "Client Script",
 "dt": "Batch AMB",
 "enabled": 1,
 "idx": 0,
 "modified": "2025-08-30 09:48:20.256259",
 "modified_by": "fcrm@amb-wellness.com",
 "module": "RND",
 "name": "Batch L2",
 "owner": "Administrator",
 "script": "// Enhanced Batch AMB Client Script - Container & Barrel Weight Management\n// Supports Level 3 containers, Level 4 scanning, and P-INV/P-VTA Work Orders\n\nfrappe.ui.form.on('Batch AMB', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            frm.set_value('custom_batch_level', '1');\n            frm.set_value('is_group', 1);\n        }\n        if (frm.doc.custom_batch_level == '3') {\n            initialize_barrel_management(frm);\n        }\n    },\n\n    refresh: function(frm) {\n        if (should_auto_generate(frm)) {\n            generate_batch_code(frm);\n        }\n        add_level_specific_buttons(frm);\n        if (frm.doc.custom_batch_level == '3') {\n            update_weight_totals(frm);\n        }\n    },\n\n    work_order_ref: function(frm) {\n        if (frm.doc.work_order_ref) {\n            fetch_work_order_data(frm);\n        }\n    },\n\n    custom_batch_level: function(frm) {\n        if (!frm.is_new()) {\n            frappe.msgprint('Cannot change batch level of existing documents. Create a new document for different levels.');\n            frm.set_value('custom_batch_level', frm.doc.__original_level || '1');\n            return;\n        }\n        configure_level_settings(frm);\n        if (should_auto_generate(frm)) {\n            generate_batch_code(frm);\n        }\n    },\n\n    parent_batch_amb: function(frm) {\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\n            frappe.msgprint('A batch cannot be its own parent');\n            frm.set_value('parent_batch_amb', '');\n            return;\n        }\n        if (frm.doc.parent_batch_amb && should_auto_generate(frm)) {\n            generate_batch_code(frm);\n        }\n    },\n\n    quick_barcode_scan: function(frm) {\n        if (frm.doc.quick_barcode_scan && frm.doc.custom_batch_level == '3') {\n            process_quick_barcode_scan(frm);\n        }\n    },\n\n    default_packaging_type: function(frm) {\n        if (frm.doc.default_packaging_type) {\n            fetch_default_tara_weight(frm);\n        }\n    },\n\n    before_save: function(frm) {\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\n            frappe.throw('A batch cannot be its own parent');\n            return false;\n        }\n        if (parseInt(frm.doc.custom_batch_level || '0', 10) > 1 && !frm.doc.parent_batch_amb) {\n            frappe.throw('Parent Batch AMB is required for level ' + frm.doc.custom_batch_level);\n            return false;\n        }\n        if (!frm.doc.__original_level) {\n            frm.doc.__original_level = frm.doc.custom_batch_level;\n        }\n        if (frm.doc.custom_batch_level == '3') {\n            validate_barrel_data(frm);\n        }\n        return true;\n    }\n});\n\n// Child Table events\nfrappe.ui.form.on('Container Barrels', {\n    container_barrels_add: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        if (frm.doc.default_packaging_type) {\n            frappe.model.set_value(cdt, cdn, 'packaging_type', frm.doc.default_packaging_type);\n        }\n        generate_barrel_serial_number(frm, row);\n    },\n\n    barcode_scan_input: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        if (row.barcode_scan_input) {\n            process_barcode_scan(frm, cdt, cdn, row.barcode_scan_input);\n        }\n    },\n\n    packaging_type: function(frm, cdt, cdn) {\n        const row = locals[cdt][cdn];\n        if (row.packaging_type) {\n            fetch_tara_weight_for_row(frm, cdt, cdn);\n        }\n    },\n\n    gross_weight: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n        update_weight_totals(frm);\n    },\n\n    tara_weight: function(frm, cdt, cdn) {\n        calculate_net_weight(frm, cdt, cdn);\n        update_weight_totals(frm);\n    },\n\n    container_barrels_remove: function(frm) {\n        update_weight_totals(frm);\n    }\n});\n\n// Level settings and UI\nfunction configure_level_settings(frm) {\n    const level = frm.doc.custom_batch_level;\n    switch(level) {\n        case '1':\n            frm.set_value('parent_batch_amb', '');\n            frm.set_value('is_group', 1);\n            break;\n        case '2':\n            frm.set_value('is_group', 1);\n            break;\n        case '3':\n            frm.set_value('is_group', 1);\n            initialize_barrel_management(frm);\n            break;\n        case '4':\n            frm.set_value('is_group', 0);\n            break;\n        default:\n            frm.set_value('is_group', 0);\n    }\n}\n\nfunction add_level_specific_buttons(frm) {\n    frm.custom_buttons = {};\n    if (frm.is_new()) return;\n\n    switch(frm.doc.custom_batch_level) {\n        case '1':\n            frm.add_custom_button(__('Create Sublot'), function() {\n                create_sublot_batch(frm);\n            });\n            break;\n        case '2':\n            frm.add_custom_button(__('Create Container'), function() {\n                create_container_batch(frm);\n            });\n            break;\n        case '3':\n            frm.add_custom_button(__('Scan Multiple Barcodes'), function() {\n                open_bulk_scan_dialog(frm);\n            });\n            frm.add_custom_button(__('Generate Barrel Serials'), function() {\n                generate_bulk_barrel_serials(frm);\n            });\n            frm.add_custom_button(__('Validate All Weights'), function() {\n                validate_all_barrel_weights(frm);\n            });\n            break;\n    }\n}\n\n// Barrel management\nfunction initialize_barrel_management(frm) {\n    setTimeout(function() {\n        update_weight_totals(frm);\n    }, 500);\n}\n\nfunction process_quick_barcode_scan(frm) {\n    const barcode = frm.doc.quick_barcode_scan;\n    if (!validate_code39_format(barcode)) {\n        frappe.msgprint('Invalid CODE-39 barcode format');\n        frm.set_value('quick_barcode_scan', '');\n        return;\n    }\n    if (frm.doc.custom_batch_level == '3') {\n            calculate_container_totals(frm);\n    }\n    if (check_duplicate_serial(frm, barcode)) {\n        frappe.msgprint('Barrel serial number already exists: ' + barcode);\n        frm.set_value('quick_barcode_scan', '');\n        return;\n    }\n    const row = frm.add_child('container_barrels');\n    row.barrel_serial_number = barcode;\n    row.packaging_type = frm.doc.default_packaging_type;\n    row.scan_timestamp = frappe.datetime.now_datetime();\n    if (row.packaging_type) {\n        fetch_tara_weight_for_row(frm, row.doctype, row.name);\n    }\n    frm.refresh_field('container_barrels');\n    frm.set_value('quick_barcode_scan', '');\n    setTimeout(function() { frm.scroll_to_field('container_barrels'); }, 300);\n}\n\nfunction process_barcode_scan(frm, cdt, cdn, barcode) {\n    const row = locals[cdt][cdn];\n    if (!validate_code39_format(barcode)) {\n        frappe.msgprint('Invalid CODE-39 barcode format');\n        frappe.model.set_value(cdt, cdn, 'barcode_scan_input', '');\n        return;\n    }\n    frappe.model.set_value(cdt, cdn, 'barrel_serial_number', barcode);\n    frappe.model.set_value(cdt, cdn, 'scan_timestamp', frappe.datetime.now_datetime());\n    frappe.model.set_value(cdt, cdn, 'barcode_scan_input', '');\n    if (row.packaging_type) {\n        fetch_tara_weight_for_row(frm, cdt, cdn);\n    }\n}\n\nfunction generate_barrel_serial_number(frm, row) {\n    const container_code = frm.doc.title || frm.doc.custom_generated_batch_name;\n    if (!container_code) return;\n\n    let max_seq = 0;\n    (frm.doc.container_barrels || []).forEach(barrel => {\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.startsWith(container_code)) {\n            const match = barrel.barrel_serial_number.match(/-([0-9]+)$/);\n            if (match) {\n                max_seq = Math.max(max_seq, parseInt(match[1], 10));\n            }\n        }\n    });\n\n    const next_seq = (max_seq + 1).toString().padStart(3, '0');\n    row.barrel_serial_number = `${container_code}-${next_seq}`;\n}\n\nfunction fetch_tara_weight_for_row(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    if (!row.packaging_type) return;\n\n    frappe.call({\n        method: 'frappe.client.get',\n        args: {\n            doctype: 'Item',\n            name: row.packaging_type\n        },\n        callback: function(r) {\n            if (r.message && r.message.weight_per_unit) {\n                frappe.model.set_value(cdt, cdn, 'tara_weight', r.message.weight_per_unit);\n                calculate_net_weight(frm, cdt, cdn);\n            }\n        }\n    });\n}\n\nfunction calculate_net_weight(frm, cdt, cdn) {\n    const row = locals[cdt][cdn];\n    if (row.gross_weight && row.tara_weight) {\n        const net_weight = row.gross_weight - row.tara_weight;\n        frappe.model.set_value(cdt, cdn, 'net_weight', net_weight);\n        frappe.model.set_value(cdt, cdn, 'weight_validated', net_weight > 0 && net_weight < row.gross_weight ? 1 : 0);\n    }\n}\n\nfunction update_weight_totals(frm) {\n    if (frm.doc.custom_batch_level != '3' || !frm.doc.container_barrels) return;\n\n    let total_gross = 0, total_tara = 0, total_net = 0, barrel_count = 0;\n    frm.doc.container_barrels.forEach(row => {\n        if (row.gross_weight) total_gross += row.gross_weight;\n        if (row.tara_weight) total_tara += row.tara_weight;\n        if (row.net_weight) total_net += row.net_weight;\n        if (row.barrel_serial_number) barrel_count += 1;\n    });\n    frm.set_value('total_gross_weight', total_gross);\n    frm.set_value('total_tara_weight', total_tara);\n    frm.set_value('total_net_weight', total_net);\n    frm.set_value('barrel_count', barrel_count);\n}\n\n// Validation helpers\nfunction validate_code39_format(barcode) {\n    const s = String(barcode || '').toUpperCase();\n    // Allowed: A-Z 0-9 and - . space $ / + % *\n    return /^[A-Z0-9\\-\\.\\s$\\/+%*]+$/.test(s);\n}\n\nfunction check_duplicate_serial(frm, serial) {\n    if (!frm.doc.container_barrels) return false;\n    return frm.doc.container_barrels.some(row => row.barrel_serial_number === serial);\n}\n\nfunction validate_barrel_data(frm) {\n    if (!frm.doc.container_barrels) return true;\n    let has_errors = false;\n\n    frm.doc.container_barrels.forEach((row, index) => {\n        if (row.barrel_serial_number && !row.gross_weight) {\n            frappe.msgprint(`Row ${index + 1}: Gross weight is required for barrel ${row.barrel_serial_number}`);\n            has_errors = true;\n        }\n        if (row.gross_weight && row.tara_weight && row.net_weight <= 0) {\n            frappe.msgprint(`Row ${index + 1}: Net weight cannot be zero or negative for barrel ${row.barrel_serial_number}`);\n            has_errors = true;\n        }\n    });\n\n    if (has_errors) {\n        frappe.throw('Please fix barrel weight validation errors before saving.');\n    }\n    return true;\n}\n\n// Bulk ops\nfunction open_bulk_scan_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: 'Bulk Barcode Scanning',\n        fields: [\n            { fieldtype: 'Small Text', fieldname: 'barcode_list', label: 'Scan Multiple Barcodes (one per line)', description: 'Scan or paste CODE-39 barcodes, one per line' },\n            { fieldtype: 'Link', fieldname: 'bulk_packaging_type', label: 'Default Packaging Type', options: 'Item', reqd: 1 }\n        ],\n        primary_action_label: 'Add Barrels',\n        primary_action: function(values) {\n            process_bulk_barcodes(frm, values.barcode_list, values.bulk_packaging_type);\n            dialog.hide();\n        }\n    });\n    if (frm.doc.default_packaging_type) {\n        dialog.set_value('bulk_packaging_type', frm.doc.default_packaging_type);\n    }\n    dialog.show();\n}\n\nfunction process_bulk_barcodes(frm, barcode_text, packaging_type) {\n    const barcodes = barcode_text.split('\\n').filter(b => b.trim());\n    let added_count = 0;\n\n    barcodes.forEach(b => {\n        const barcode = b.trim();\n        if (!validate_code39_format(barcode)) {\n            frappe.msgprint(`Invalid barcode format: ${barcode}`);\n            return;\n        }\n        if (check_duplicate_serial(frm, barcode)) {\n            frappe.msgprint(`Duplicate barcode: ${barcode}`);\n            return;\n        }\n        const row = frm.add_child('container_barrels');\n        row.barrel_serial_number = barcode;\n        row.packaging_type = packaging_type;\n        row.scan_timestamp = frappe.datetime.now_datetime();\n        added_count += 1;\n    });\n\n    frm.refresh_field('container_barrels');\n    if (added_count > 0) {\n        frappe.msgprint(`Added ${added_count} barrels successfully`);\n        fetch_tara_weights_for_all_rows(frm, packaging_type);\n    }\n}\n\nfunction fetch_tara_weights_for_all_rows(frm, packaging_type) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Item', name: packaging_type },\n        callback: function(r) {\n            if (r.message && r.message.weight_per_unit) {\n                const tara_weight = r.message.weight_per_unit;\n                (frm.doc.container_barrels || []).forEach(row => {\n                    if (row.packaging_type === packaging_type && !row.tara_weight) {\n                        frappe.model.set_value('Container Barrels', row.name, 'tara_weight', tara_weight);\n                    }\n                });\n                frm.refresh_field('container_barrels');\n            }\n        }\n    });\n}\n\nfunction generate_bulk_barrel_serials(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: 'Generate Barrel Serial Numbers',\n        fields: [\n            { fieldtype: 'Int', fieldname: 'barrel_count', label: 'Number of Barrels', reqd: 1, default: 20 },\n            { fieldtype: 'Link', fieldname: 'bulk_packaging_type', label: 'Packaging Type', options: 'Item', reqd: 1 }\n        ],\n        primary_action_label: 'Generate Serials',\n        primary_action: function(values) {\n            generate_sequential_serials(frm, values.barrel_count, values.bulk_packaging_type);\n            dialog.hide();\n        }\n    });\n    if (frm.doc.default_packaging_type) {\n        dialog.set_value('bulk_packaging_type', frm.doc.default_packaging_type);\n    }\n    dialog.show();\n}\n\nfunction generate_sequential_serials(frm, count, packaging_type) {\n    const container_code = frm.doc.title || frm.doc.custom_generated_batch_name;\n    if (!container_code) {\n        frappe.msgprint('Container code not available. Please save the container first.');\n        return;\n    }\n    let max_seq = 0;\n    (frm.doc.container_barrels || []).forEach(barrel => {\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.startsWith(container_code)) {\n            const match = barrel.barrel_serial_number.match(/-([0-9]+)$/);\n            if (match) {\n                max_seq = Math.max(max_seq, parseInt(match[1], 10));\n            }\n        }\n    });\n    for (let i = 1; i <= count; i++) {\n        const serial_num = (max_seq + i).toString().padStart(3, '0');\n        const serial = `${container_code}-${serial_num}`;\n        const row = frm.add_child('container_barrels');\n        row.barrel_serial_number = serial;\n        row.packaging_type = packaging_type;\n    }\n    frm.refresh_field('container_barrels');\n    frappe.msgprint(`Generated ${count} barrel serial numbers`);\n    fetch_tara_weights_for_all_rows(frm, packaging_type);\n}\n\nfunction validate_all_barrel_weights(frm) {\n    if (!frm.doc.container_barrels) {\n        frappe.msgprint('No barrels to validate');\n        return;\n    }\n    let validated_count = 0, error_count = 0;\n    frm.doc.container_barrels.forEach(row => {\n        if (row.gross_weight && row.tara_weight && row.net_weight > 0) {\n            frappe.model.set_value('Container Barrels', row.name, 'weight_validated', 1);\n            validated_count += 1;\n        } else {\n            error_count += 1;\n        }\n    });\n    frm.refresh_field('container_barrels');\n    frappe.msgprint(`Validation complete: ${validated_count} valid, ${error_count} with errors`);\n}\n\n// Create children by level\nfunction create_sublot_batch(parent_frm) {\n    frappe.new_doc('Batch AMB', {\n        'custom_batch_level': '2',\n        'parent_batch_amb': parent_frm.doc.name,\n        'work_order_ref': parent_frm.doc.work_order_ref,\n        'sales_order_related': parent_frm.doc.sales_order_related,\n        'production_plant_name': parent_frm.doc.production_plant_name,\n        'custom_batch_year': parent_frm.doc.custom_batch_year,\n        'custom_plant_code': parent_frm.doc.custom_plant_code,\n        'tds_info': parent_frm.doc.tds_info,\n        'wo_item_name': parent_frm.doc.wo_item_name,\n        'item_to_manufacture': parent_frm.doc.item_to_manufacture,\n        'tds_item_name': parent_frm.doc.tds_item_name,\n        'is_group': 1\n    });\n}\nfunction create_container_batch(parent_frm) {\n    frappe.new_doc('Batch AMB', {\n        'custom_batch_level': '3',\n        'parent_batch_amb': parent_frm.doc.name,\n        'work_order_ref': parent_frm.doc.work_order_ref,\n        'sales_order_related': parent_frm.doc.sales_order_related,\n        'production_plant_name': parent_frm.doc.production_plant_name,\n        'custom_batch_year': parent_frm.doc.custom_batch_year,\n        'custom_plant_code': parent_frm.doc.custom_plant_code,\n        'tds_info': parent_frm.doc.tds_info,\n        'wo_item_name': parent_frm.doc.wo_item_name,\n        'item_to_manufacture': parent_frm.doc.item_to_manufacture,\n        'tds_item_name': parent_frm.doc.tds_item_name,\n        'is_group': 1\n    });\n}\n\n// Data fetching and generation\nfunction fetch_work_order_data(frm) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Work Order', name: frm.doc.work_order_ref },\n        callback: function(r) {\n            if (!r.message) return;\n            const wo = r.message;\n            frm.set_value('sales_order_related', wo.sales_order);\n            frm.set_value('wo_item_name', wo.item_name);\n            frm.set_value('item_to_manufacture', wo.production_item);\n            fetch_sales_order_data(frm, wo.sales_order);\n            fetch_item_data(frm, wo.production_item);\n            if (should_auto_generate(frm)) {\n                setTimeout(function() { generate_batch_code(frm); }, 300);\n            }\n        }\n    });\n}\n\nfunction fetch_sales_order_data(frm, sales_order) {\n    if (!sales_order) return;\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Sales Order', name: sales_order },\n        callback: function(r) {}\n    });\n}\n\nfunction fetch_item_data(frm, item_code) {\n    if (!item_code) return;\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Item', name: item_code },\n        callback: function(r) {\n            if (!r.message) return;\n            const item = r.message;\n            frm.set_value('tds_info', item.item_name);\n            frm.set_value('tds_item_name', item.item_name);\n        }\n    });\n}\n\nfunction fetch_default_tara_weight(frm) {\n    if (!frm.doc.default_packaging_type) return;\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Item', name: frm.doc.default_packaging_type },\n        callback: function(r) {\n            if (r.message && r.message.weight_per_unit) {\n                frappe.msgprint(`Default tara weight: ${r.message.weight_per_unit} kg`);\n            }\n        }\n    });\n}\n\nfunction should_auto_generate(frm) {\n    const has_reference = !!frm.doc.work_order_ref;\n    const has_level = !!frm.doc.custom_batch_level;\n    const has_plant_code = !!frm.doc.custom_plant_code;\n    const has_plant_name = !!frm.doc.production_plant_name;\n    const ok = has_reference && has_level && (has_plant_code || has_plant_name);\n    if (ok) console.log('Auto-generate conditions met');\n    return ok;\n}\n\nfunction generate_batch_code(frm) {\n    const level = parseInt(frm.doc.custom_batch_level, 10) || 1;\n    if (level === 1) {\n        generate_level_1_batch_code(frm);\n    } else {\n        generate_sublot_batch_code(frm, level);\n    }\n}\n\nfunction generate_level_1_batch_code(frm) {\n    get_base_components(frm, function(components) {\n        const consecutive = components.consecutive.toString().padStart(5, '0');\n        const plant_code = String(components.plant_code);\n        let final_batch_code;\n        if (components.series_type === 'P') {\n            // P-INV/P-VTA-00001-<plant>\n            final_batch_code = `${components.product_code}-${consecutive}-${plant_code}`;\n        } else {\n            // Standard: PRODUCT(4)+CONSEC(5)+PLANT\n            final_batch_code = `${components.product_code}${consecutive}${plant_code}`;\n        }\n        frm.set_value('title', final_batch_code);\n        frm.set_value('custom_generated_batch_name', final_batch_code);\n        frm.set_value('custom_consecutive_number', consecutive);\n        frm.set_value('custom_plant_code', plant_code);\n        frm.refresh_field('title');\n        frm.refresh_field('custom_generated_batch_name');\n    });\n}\n\nfunction generate_sublot_batch_code(frm, level) {\n    if (!frm.doc.parent_batch_amb) return;\n    if (frm.doc.parent_batch_amb === frm.doc.name) {\n        frappe.msgprint('A batch cannot be its own parent');\n        frm.set_value('parent_batch_amb', '');\n        return;\n    }\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Batch AMB', name: frm.doc.parent_batch_amb },\n        callback: function(r) {\n            if (!r.message) { frappe.msgprint('Could not fetch parent batch information'); return; }\n            const parent_batch = r.message;\n            const parent_batch_code = parent_batch.title || parent_batch.custom_generated_batch_name;\n            if (!parent_batch_code) { frappe.msgprint('Parent batch does not have a valid batch code'); return; }\n\n            get_next_sublot_consecutive(frm, parent_batch_code, function(next_consecutive) {\n                let final_batch_code;\n                if (level == 3) {\n                    final_batch_code = `${parent_batch_code}-C${next_consecutive}`;\n                } else {\n                    final_batch_code = `${parent_batch_code}-${next_consecutive}`;\n                }\n                frm.set_value('title', final_batch_code);\n                frm.set_value('custom_generated_batch_name', final_batch_code);\n                frm.set_value('custom_sublot_consecutive', parseInt(next_consecutive, 10));\n                frm.refresh_field('title');\n                frm.refresh_field('custom_generated_batch_name');\n            });\n        }\n    });\n}\n\nfunction get_base_components(frm, callback) {\n    frappe.call({\n        method: 'frappe.client.get',\n        args: { doctype: 'Work Order', name: frm.doc.work_order_ref },\n        callback: function(r) {\n            if (!r.message) {\n                return callback({\n                    product_code: '0000',\n                    consecutive: 1,\n                    plant_code: derive_plant_code(frm),\n                    source: 'fallback',\n                    series_type: 'WO'\n                });\n            }\n            const wo = r.message;\n            const naming = String(wo.naming_series || wo.name || '').toUpperCase();\n            const isPInv = /^P-INV/.test(naming);\n            const isPVta = /^P-VTA/.test(naming);\n\n            let series_type = 'WO';\n            let product_code = '';\n            if (isPInv || isPVta) {\n                series_type = 'P';\n                const m = naming.match(/^(P-(?:INV|VTA))/);\n                product_code = m ? m[1] : 'P';\n            } else {\n                if (wo.production_item) {\n                    const m = String(wo.production_item).match(/^(\\d{4})/);\n                    product_code = m ? m[1] : '0000';\n                } else {\n                    product_code = '0000';\n                }\n            }\n\n            let consecutive = 1;\n            const wm = String(wo.name || '').match(/(\\d+)$/);\n            if (wm) consecutive = parseInt(wm[1], 10);\n\n            const plant_code = derive_plant_code(frm);\n            callback({ product_code, consecutive, plant_code, source: 'work_order', series_type });\n        }\n    });\n}\n\nfunction derive_plant_code(frm) {\n    const cp = parseInt(frm.doc.custom_plant_code, 10);\n    if (!isNaN(cp) && cp > 0) return cp;\n    const m = String(frm.doc.production_plant_name || '').match(/^(\\d+)/);\n    return m ? parseInt(m[1], 10) : 1;\n}\n\nfunction calculate_container_totals(frm) {\n    let total_gross = 0;\n    let total_tara = 0;\n    let total_net = 0;\n    let barrel_count = 0;\n    \n    (frm.doc.container_barrels || []).forEach(function(barrel) {\n        if (barrel.gross_weight) {\n            total_gross += parseFloat(barrel.gross_weight);\n        }\n        if (barrel.tara_weight) {\n            total_tara += parseFloat(barrel.tara_weight);\n        }\n        if (barrel.net_weight) {\n            total_net += parseFloat(barrel.net_weight);\n        }\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.trim()) {\n            barrel_count += 1;\n        }\n    });\n    \n    frm.set_value('total_gross_weight', total_gross);\n    frm.set_value('total_tara_weight', total_tara);\n    frm.set_value('total_net_weight', total_net);\n    frm.set_value('barrel_count', barrel_count);\n}\n\nfunction get_next_sublot_consecutive(frm, parent_batch_code, callback) {\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            doctype: 'Batch AMB',\n            filters: { 'parent_batch_amb': frm.doc.parent_batch_amb, 'name': ['!=', frm.doc.name || ''] },\n            fields: ['name', 'title', 'custom_generated_batch_name'],\n            limit_page_length: 100\n        },\n        callback: function(r) {\n            let next_consecutive = 1;\n            if (r.message && r.message.length > 0) {\n                const existing_consecutives = [];\n                const parentEsc = parent_batch_code.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n                const patterns = [ new RegExp(`^${parentEsc}-(\\\\d+)$`), new RegExp(`^${parentEsc}-C(\\\\d+)$`) ];\n                r.message.forEach(function(batch) {\n                    const batch_name = batch.title || batch.custom_generated_batch_name || '';\n                    patterns.forEach(pattern => {\n                        const match = batch_name.match(pattern);\n                        if (match) existing_consecutives.push(parseInt(match[1], 10));\n                    });\n                });\n                if (existing_consecutives.length > 0) next_consecutive = Math.max(...existing_consecutives) + 1;\n            }\n            callback(next_consecutive);\n        }\n    });\n}\n\nconsole.log('Enhanced Batch AMB client script loaded');",
 "view": "Form"
}
