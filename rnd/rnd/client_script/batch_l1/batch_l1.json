{
 "creation": "2025-08-01 19:36:10.778242",
 "docstatus": 0,
 "doctype": "Client Script",
 "dt": "Batch",
 "enabled": 1,
 "idx": 0,
 "modified": "2025-08-24 21:20:20.894218",
 "modified_by": "Administrator",
 "module": "RND",
 "name": "Batch L1",
 "owner": "Administrator",
 "script": "frappe.ui.form.on('Batch AMB', {\r\n    // Initialize form\r\n    onload: function(frm) {\r\n        console.log('Batch AMB form loaded');\r\n        \r\n        // Ensure we're in form view, not tree view\r\n        if (frm.meta.default_view === 'Tree') {\r\n            frm.set_df_property('default_view', 'List');\r\n            console.log('Switched from Tree to List view');\r\n        }\r\n        \r\n        // Set up field requirements\r\n        frm.set_df_property('work_order_ref', 'reqd', 1);\r\n        frm.set_df_property('production_plant_name', 'reqd', 1);\r\n        frm.set_df_property('custom_batch_level', 'reqd', 1);\r\n        \r\n        // Add custom buttons for batch generation\r\n        frm.add_custom_button(__('Generate Level 1 Batch'), function() {\r\n            generate_batch_code(frm, '1');\r\n        }, __('Batch Actions'));\r\n        \r\n        frm.add_custom_button(__('Generate Child Batch'), function() {\r\n            if (!frm.doc.custom_batch_level) {\r\n                frappe.msgprint(__('Please select batch level first'));\r\n                return;\r\n            }\r\n            generate_batch_code(frm, frm.doc.custom_batch_level);\r\n        }, __('Batch Actions'));\r\n        \r\n        // Add button to switch to form view if needed\r\n        if (window.location.href.includes('tree')) {\r\n            frm.add_custom_button(__('Switch to Form View'), function() {\r\n                window.location.href = '/app/batch-amb';\r\n            }, __('View'));\r\n        }\r\n    },\r\n\r\n    // After form is rendered\r\n    refresh: function(frm) {\r\n        console.log('Form refreshed');\r\n        \r\n        // Ensure save buttons are visible\r\n        if (frm.page && frm.page.btn_primary) {\r\n            frm.page.btn_primary.show();\r\n            frm.page.btn_secondary.show();\r\n        }\r\n        \r\n        // Check if we're in a dialog/preview and force full form if needed\r\n        if (frm.is_dirty() && !frm.doc.__islocal && frm.meta.issingle == 0) {\r\n            setTimeout(function() {\r\n                if (frm.page && frm.page.btn_primary && frm.page.btn_primary.is(':hidden')) {\r\n                    console.log('Enabling save buttons for existing document');\r\n                    frm.page.btn_primary.show();\r\n                    frm.page.btn_secondary.show();\r\n                    frm.enable_save();\r\n                }\r\n            }, 1000);\r\n        }\r\n    },\r\n\r\n    // When work order is selected\r\n    work_order_ref: function(frm) {\r\n        if (frm.doc.work_order_ref) {\r\n            console.log('Work Order selected:', frm.doc.work_order_ref);\r\n            \r\n            // Fetch work order details using your server API\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Work Order',\r\n                    fieldname: ['production_item', 'name', 'creation', 'sales_order'],\r\n                    filters: { name: frm.doc.work_order_ref }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log('Work Order details fetched:', r.message);\r\n                        \r\n                        // Set item to manufacture\r\n                        frm.set_value('item_to_manufacture', r.message.production_item);\r\n                        \r\n                        // Extract consecutive number from work order name (last 3 digits)\r\n                        let wo_name = r.message.name;\r\n                        let consecutive_match = wo_name.match(/\\d{3}$/);\r\n                        if (consecutive_match) {\r\n                            frm.set_value('consecutive_number', parseInt(consecutive_match[0]));\r\n                        } else {\r\n                            // Fallback: use creation timestamp\r\n                            frm.set_value('consecutive_number', 1);\r\n                        }\r\n                        \r\n                        // Extract year from creation date\r\n                        let creation_date = new Date(r.message.creation);\r\n                        let year = creation_date.getFullYear().toString().slice(-2);\r\n                        frm.set_value('lft', year);\r\n                        \r\n                        // Set sales order if available\r\n                        if (r.message.sales_order) {\r\n                            frm.set_value('sales_order_related', r.message.sales_order);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    // When production plant is selected\r\n    production_plant_name: function(frm) {\r\n        if (frm.doc.production_plant_name) {\r\n            console.log('Production Plant selected:', frm.doc.production_plant_name);\r\n            \r\n            // Extract plant code (first character or numeric value from name)\r\n            let plant_code = extract_plant_code(frm.doc.production_plant_name);\r\n            frm.set_value('rgt', plant_code);\r\n            console.log('Plant code extracted:', plant_code);\r\n        }\r\n    },\r\n\r\n    // When batch level changes\r\n    custom_batch_level: function(frm) {\r\n        if (frm.doc.custom_batch_level) {\r\n            console.log('Batch Level changed to:', frm.doc.custom_batch_level);\r\n            \r\n            if (frm.doc.custom_batch_level > '1') {\r\n                frm.set_df_property('parent_batch_amb', 'reqd', 1);\r\n                \r\n                // Auto-fetch possible parents based on level\r\n                if (frm.doc.work_order_ref) {\r\n                    fetch_possible_parents(frm);\r\n                }\r\n            } else {\r\n                frm.set_df_property('parent_batch_amb', 'reqd', 0);\r\n                frm.set_value('parent_batch_amb', '');\r\n            }\r\n            \r\n            // Auto-generate batch code if all required fields are present\r\n            if (frm.doc.work_order_ref && frm.doc.production_plant_name && frm.doc.item_to_manufacture) {\r\n                setTimeout(function() {\r\n                    generate_batch_code(frm, frm.doc.custom_batch_level);\r\n                }, 500);\r\n            }\r\n        }\r\n    },\r\n\r\n    // When parent batch is selected\r\n    parent_batch_amb: function(frm) {\r\n        if (frm.doc.parent_batch_amb && frm.doc.custom_batch_level > '1') {\r\n            console.log('Parent Batch selected:', frm.doc.parent_batch_amb);\r\n            \r\n            // Verify parent level is appropriate using your server API\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Batch AMB',\r\n                    fieldname: ['custom_batch_level', 'custom_generated_batch_name'],\r\n                    filters: { name: frm.doc.parent_batch_amb }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        let parent_level = parseInt(r.message.custom_batch_level);\r\n                        let current_level = parseInt(frm.doc.custom_batch_level);\r\n                        \r\n                        if (parent_level !== current_level - 1) {\r\n                            frappe.msgprint(__('Parent batch must be level ' + (current_level - 1)));\r\n                            frm.set_value('parent_batch_amb', '');\r\n                        } else {\r\n                            console.log('Parent validation passed');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    // Before saving the document\r\n    before_save: function(frm) {\r\n        console.log('Before save validation');\r\n        \r\n        // Validate batch level and parent relationship\r\n        if (frm.doc.custom_batch_level > '1' && !frm.doc.parent_batch_amb) {\r\n            frappe.throw(__('Parent Batch AMB is required for level ' + frm.doc.custom_batch_level));\r\n        }\r\n        \r\n        // Validate batch code uniqueness using your server API\r\n        if (frm.doc.custom_generated_batch_name) {\r\n            validate_batch_uniqueness(frm);\r\n        }\r\n        \r\n        // Set title same as batch code\r\n        if (frm.doc.custom_generated_batch_name && !frm.doc.title) {\r\n            frm.set_value('title', frm.doc.custom_generated_batch_name);\r\n        }\r\n        \r\n        // Ensure lft and rgt are properly set for tree structure\r\n        if (!frm.doc.lft || !frm.doc.rgt) {\r\n            frm.set_value('lft', '0001');\r\n            frm.set_value('rgt', '0002');\r\n        }\r\n    }\r\n});\r\n\r\n// Extract plant code from production plant name\r\nfunction extract_plant_code(plant_name) {\r\n    // Try to extract numeric code from name\r\n    let numeric_match = plant_name.match(/\\d+/);\r\n    if (numeric_match) {\r\n        return numeric_match[0].charAt(0); // First digit of the number\r\n    }\r\n    \r\n    // Fallback: first character of the plant name\r\n    return plant_name.charAt(0);\r\n}\r\n\r\n// Fetch possible parent batches for the current level\r\nfunction fetch_possible_parents(frm) {\r\n    let parent_level = parseInt(frm.doc.custom_batch_level) - 1;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: {\r\n                'work_order_ref': frm.doc.work_order_ref,\r\n                'custom_batch_level': parent_level.toString()\r\n            },\r\n            fields: ['name', 'custom_generated_batch_name', 'title'],\r\n            limit: 50\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                console.log('Available parents:', r.message);\r\n                // You could populate a dropdown or suggest parents here\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to generate batch code (integrated with your server API)\r\nfunction generate_batch_code(frm, level) {\r\n    console.log('Generating batch code for level:', level);\r\n    \r\n    // Validate required fields\r\n    if (!frm.doc.work_order_ref) {\r\n        frappe.msgprint(__('Work Order Reference is required'));\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.production_plant_name) {\r\n        frappe.msgprint(__('Production Plant is required'));\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.item_to_manufacture) {\r\n        frappe.msgprint(__('Item to Manufacture is required'));\r\n        return;\r\n    }\r\n    \r\n    // Use your server API for batch generation to ensure consistency\r\n    frappe.call({\r\n        method: 'batch_amb_custom_tree_api.add_batch_node',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            is_group: (level === '1' || level === '2') ? 1 : 0,\r\n            work_order_ref: frm.doc.work_order_ref,\r\n            parent: frm.doc.parent_batch_amb || null,\r\n            is_root: (level === '1')\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                console.log('Batch node created via API:', r.message);\r\n                \r\n                // Now generate the actual batch code\r\n                generate_actual_batch_code(frm, level, r.message.name);\r\n            }\r\n        },\r\n        error: function(err) {\r\n            console.error('API Error:', err);\r\n            frappe.msgprint(__('Error creating batch node: ') + err.message);\r\n        }\r\n    });\r\n}\r\n\r\n// Generate the actual batch code format\r\nfunction generate_actual_batch_code(frm, level, batch_name) {\r\n    // Get base components\r\n    let product_code = frm.doc.item_to_manufacture.substring(0, 4);\r\n    let consecutive = frm.doc.consecutive_number ? frm.doc.consecutive_number.toString().padStart(3, '0') : '001';\r\n    let year = frm.doc.lft || new Date().getFullYear().toString().slice(-2);\r\n    let plant_code = frm.doc.rgt || extract_plant_code(frm.doc.production_plant_name);\r\n    \r\n    console.log('Base components:', { product_code, consecutive, year, plant_code });\r\n    \r\n    // Generate base batch code (level 1)\r\n    let base_batch_code = `${product_code}-${consecutive}-${year}-${plant_code}`;\r\n    let final_batch_code = base_batch_code;\r\n    \r\n    // Add level-specific suffix\r\n    switch(level) {\r\n        case '2':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-${next_num}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        case '3':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-${next_num.toString().padStart(3, '0')}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        case '4':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-P${next_num.toString().padStart(3, '0')}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        default: // Level 1\r\n            set_final_batch_values(frm, base_batch_code, '1', parseInt(consecutive), batch_name);\r\n    }\r\n}\r\n\r\n// Get next consecutive number for child batches\r\nfunction get_next_consecutive(frm, level, callback) {\r\n    let filters = {\r\n        'work_order_ref': frm.doc.work_order_ref,\r\n        'custom_batch_level': level\r\n    };\r\n    \r\n    if (frm.doc.parent_batch_amb) {\r\n        filters['parent_batch_amb'] = frm.doc.parent_batch_amb;\r\n    }\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: filters,\r\n            fields: ['consecutive_number'],\r\n            order_by: 'consecutive_number desc',\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            let next_num = 1;\r\n            if (r.message && r.message.length > 0) {\r\n                next_num = (r.message[0].consecutive_number || 0) + 1;\r\n            }\r\n            console.log('Next consecutive for level', level, ':', next_num);\r\n            callback(next_num);\r\n        }\r\n    });\r\n}\r\n\r\n// Set final batch values after generation\r\nfunction set_final_batch_values(frm, batch_code, level, consecutive_num, batch_name) {\r\n    frm.set_value('custom_generated_batch_name', batch_code);\r\n    frm.set_value('title', batch_code);\r\n    frm.set_value('custom_batch_level', level);\r\n    frm.set_value('consecutive_number', consecutive_num);\r\n    frm.set_value('name', batch_name); // Set the name from API\r\n    \r\n    // Set is_group based on level\r\n    if (level === '1' || level === '2') {\r\n        frm.set_value('is_group', 1);\r\n    } else {\r\n        frm.set_value('is_group', 0);\r\n    }\r\n    \r\n    console.log('Final batch code generated:', batch_code);\r\n    frappe.show_alert(__('Batch code generated: ') + batch_code);\r\n    \r\n    // Refresh the form to show all values\r\n    frm.refresh();\r\n}\r\n\r\n// Validate batch code uniqueness\r\nfunction validate_batch_uniqueness(frm) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: {\r\n                'custom_generated_batch_name': frm.doc.custom_generated_batch_name,\r\n                'name': ['!=', frm.doc.name || '']\r\n            },\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                frappe.msgprint(__('Batch code already exists: ') + frm.doc.custom_generated_batch_name);\r\n                frm.set_value('custom_generated_batch_name', '');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Force form view if we're stuck in tree view\r\nif (window.location.href.includes('/tree/')) {\r\n    console.log('Redirecting from tree view to form view');\r\n    window.location.href = window.location.href.replace('/tree/', '/list/');\r\n}\r\n\r\n// Ensure save buttons are always visible\r\n$(document).on('click', function() {\r\n    let primary_btn = $('.btn-primary').filter(':visible');\r\n    let secondary_btn = $('.btn-secondary').filter(':visible');\r\n    \r\n    if (primary_btn.length === 0 || secondary_btn.length === 0) {\r\n        $('.btn-primary').show();\r\n        $('.btn-secondary').show();\r\n    }\r\n});",
 "view": "Form"
}
